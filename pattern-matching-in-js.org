* Abstract
** English
The experienced Javascript developer has learned they should never use switch
statements. They have tricky semantics and force a very imperative style, good
riddance! Yet, this type of construct has a very important place in other
languages, both Object Oriented and Functional, and it is beloved by programmers
of those languages.

This talk introduces the early stage TC-39 proposal for pattern matching, the
new incarnation of switch statements for JS. It will cover the proposed
semantics of this language feature, as well as its potential applications to
front-end applications (through React/JSX) and back-end applications (through
Node/Express). By the end, developers will be able to test out this experimental
feature at home, and will be able to provide feedback to directly improve the
proposal.
** Español
Los desarrolladores de javascript aprendemos que nunca se deberían usar los
switch statements. Tienen una semántica complicada y llevan hacia un estilo muy
imperativo, que horror! Pero también es verdad que se usan mucho en otros
lenguajes, de orientación a objetos y también funcional, y que a esos
desarrolladores les encantan.

Esta charla hace una introducción a la propuesta de TC-39 de pattern matching,
la nueva encarnación de los switch statements en JS. Hablaremos de la semántica
tal como existe en la propuesta, y también como se aplicaría a las aplicaciones
del front-end (con React/JSX) y del back-end (con Node/Express). Después de
escucharla, los desarrolladores tendrán la habilidad y sabiduría para ensayar
el pattern matching en su casa, y podrán contribuir su opinión directamente a la
propuesta.
* DONE Short for node conf argentina
  CLOSED: [2018-07-27 Fri 16:56]
Javascript developers learn they should never use switch statements, yet this
type of construct has a very important place in other programming languages.
This talk introduces the early stage TC-39 proposal for pattern matching, the
new incarnation of switch statements for JS: semantics of this language feature
and as its potential applications to both front-end applications (through
React/JSX) and back-end applications (through Node/Express). By the end,
developers will be able to test out this experimental feature at home, and to
provide feedback to directly improve the proposal!
** Why
Hola que tal, I wanted to tell you why I'm excited about this talk looking at
pattern matching in javascript. This is a pretty new idea in JS, but it is
around in lots of other languages. I think showing how this feature behaves in
those languages and comparing it to how it would need to work in JS is really
interesting idea that would resonoate with the audience at node conf who tends
have experience in a few languages.

I also want to show how you can use babel to try out new language features that
haven't made it into JS yet, which is really empowering for devs. Another thing
I'm excited about with this talk is that afterwards attendees will be able to
easily try this out and add their feedback to the TC39 proposal, showing how
accessible the process is now.

La propuesta y este video los hice en ingles por lo que la gran parte de las
charlas del año pasado estaban en inglés, pero aunque yo me siento más comodo en
ingles, me gustaría darla en español por que para mi es importante mostrar la
comunidad de software en latino america.

Gracias por ver y seguro que va a ser una conf espectacular

- This will compare javascript and other languages
- Show how to use babel to try out new js
- It will show how you can contribute to tc39 process
- Could do this talk in spanish
* Sparkler
- library that inspired proposal
- https://github.com/natefaubion/sparkler
** better default args?
- https://github.com/natefaubion/sparkler#argument-length at bottom
** Variables or hardcoded values
- from lib
#+BEGIN_SRC js
  function expensiveExtraction {
    (MyExtractor(x, y, z), 1) => doThis(),
    (MyExtractor(x, y, z), *) => doThat()
  }
#+END_SRC
* TC 39 proposal
** Link
- https://github.com/tc39/proposal-pattern-matching/blob/latest/CORE.md
** Big picture
- Easy to use after destructuring syntax
- Helps both OO code and functional code
- Operator is a statement, cannot return a value
- depends on ~do~ proposal to return values
** Other
- Cannot do regex directly, need to use ~if~ with a test
- Variables in the ~when~ statement are bound within its body
- Scoping and hoisting is like ~if~
- branches can shadow variables defined outside
- No need for ~else/default~, but can be done with a variable
** Annex B, Performance
- Compiler-side optimizations is the focus
** How is this different from switch?
- destructuring binding
- no fallthrough (allows optimizations and reduces bugs)
** Gotchas
- ~Infinity~, ~undefined~, ~NaN~ are variables and can get reassigned
** Questions
*** TODO Why does this help class code?
*** TODO Does this throw error if no match and no else?
- no else statements
*** So what happens if no match?
*** DONE Does this do some internal optimizations?
    CLOSED: [2018-06-06 Wed 10:34]
- If so, this is a good use case, since doing it manually would be less
  effective
- Yes, optimizations are a big goal of the proposal

*** TODO Could you use this to better handle different func signatures?
- I'm imagining how sometimes a function can be called in these ways
#+BEGIN_SRC js
foo(cb)
foo("arg", cb)
foo("arg", {options}, cb)
#+END_SRC
*** TODO Pattern match for booleans, undefined, etc?
- Perhaps more robust than
#+BEGIN_SRC js
if (!someVariable) return next()
//other code
next()
#+END_SRC
*** TODO How does this work with flow, typescript?
*** TODO Why can't you do this with just destructuring
- optimizations might be one answer?
- undefined errors might be another?
* TODO Fix ecmascript website
- https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
- freezes and blocks until infinity
* do expressions
** Link
- https://github.com/tc39/proposal-do-expressions
** Why?
- Helps functional programming
- Variable is the result of executing some code
- better than ternary assignment for many cases
- Great for jsx templating
** Impressions
- This proposal seems to be lacking relative to pattern matching
- Is that concerning given that pattern matching depends on it?
* In rust
- https://www.youtube.com/watch?v=OkR__wxWrG0
- rust forces else clause
- Js requires more syntax (if, and/or), but can do all the same things
* In elixir
- https://www.youtube.com/watch?v=X6EVLSKqMTY
- Looks mostly like js destructuring
- if you use ~^~ before a var name, it will require it's current value to be
  pattern matched
* In F#
- https://www.youtube.com/watch?v=cnJiITa9Qg0
- compiler forces else clause
- this can be done by extracting into a function
- can match array passed in based on length
* In scala
- https://www.youtube.com/watch?v=ULcpWn23waw
- pattern matching is comparing objects against other objects
- can use it to check types
- better than type casting
- great for strongly typed languages
- can be used for parsing json in a simple clear way
- can be used to add new functions to objects that you don't control
- great for deconstructing, type checking, taking actions based on that
- con do complicated checks (8 steps in email example, with short syntax
* Babel proposal
https://github.com/babel/babel/pull/7633
* Getting it up and running
** Link
- first link syntax package
- then link proposal package
- link syntax inside of proposal?
- babel core too
- build babel
  * Install xcode tools ~xcode-select --install~
  * Also run ~make bootsrap~
  * ~npm run build~
* Why not switch statements
** Links
- https://javascriptweblog.wordpress.com/2010/03/08/caseagainstswitch/
- https://toddmotto.com/deprecating-the-switch-statement-for-object-literals/
- https://hackernoon.com/rethinking-javascript-eliminate-the-switch-statement-for-better-code-5c81c044716d
- http://bishankochher.blogspot.com/2012/02/nodejs-switch-is-evil.html
- https://hackernoon.com/flip-the-switch-239d2d479a29
** Fall throughs
- branches require ~break~ otherwise the next will execute
- https://codepen.io/juancaicedo/pen/YOKXGz?editors=0012
** Syntax
- the rest of js uses curly braces, but not ~case~
* Alternatives
** nested ternaries
- Prettier doesn't like this
- Nested can become arbitrarily deep
- Is this optimized?
** switchcaseF
- function required to delay evaluation
- https://codepen.io/juancaicedo/pen/yxBNRx?editors=0011
- there might be a bug here? I can't get it to evaluate correctly
** switchcase
- requires default arg
** Notes
- https://codepen.io/juancaicedo/pen/OoLVBg?editors=0011
- None of these options give you access to the variable conditionally
- They also don't give you access to multiple variables
- All the benefits of destructuring
* Talk
** Introduction
Friends, developers, countrymen, lend me your ears! I am angry and you should be
too. Why? Because for years us javascript-ers have been told to never touch a
switch statement. Today we will recap that tragedy, and we'll talk about how the
brave devs who came before us chose dealt with the aftermath. But I will also
introduce you to the future of the switch statement, that is to the proposal
that will bring a new feature called pattern matching to javascript.
** Bio
Thanks for coming out today, I won't actually talk like that the whole time. My
name is Juan Caicedo and I work helping people write nice code at a company
called Test Double. I'm from Colombia, Canada, and Oregon, and I love talking
about languages and guitar, so if any of that sounds interesting, feel free to
come say hi.
** Switch statements
Growing up as a junior web developer in 2014, I heard people say that you
shouldn't use switch statements. Only preparing for this talk did I ever stop to
wonder, why? I found there is a wealth of blog posts on why we should never ever
use them. My personal favorite is this one that reads "Switch statements are
evil".

The main reasons I could find that don't revolve around the morality of switch
statements were that: 1, their syntax is strange in that it relies on colons
instead of curly braces; and 2, you need to explicitly break after matching a
case, otherwise you will match other statements below it in something called
fall through hell.
#+BEGIN_SRC js
function printSwitchedValue (num) {
  switch (num) {
    case 1:
      console.log('one')
      break
    case 2:
      console.log('two')
    case 3:
      console.log('three')
    default:
      console.log('default')
  }
}

printSwitchedValue(1) // 'one'
printSwitchedValue(3) // 'three'
printSwitchedValue(2) // 'two' 'three' 'default'
#+END_SRC
** Alternatives
So what are the alternatives? I found three.
*** First
The first is using nested terneray statements:
#+BEGIN_SRC js
function printSwitchedValue (num) {
  num === 1 ? console.log('one')
    : num === 2 ? console.log('two')
    : num === 3 ? console.log('three')
    : console.log('default')
}
#+END_SRC
My trouble with this one is that it's not normal looking js at all. In fact it
requires this style of indentation, which is really non idiomatic. If you run it
through Prettier, you get more like this:
#+BEGIN_SRC js
function printSwitchedValue(num) {
  num === 1
    ? console.log("one")
    : num === 2
      ? console.log("two")
      : num === 3
        ? console.log("three")
        : console.log("default");
}
#+END_SRC
I'm not a performance expert, but my suspicion is that this would also require
evaluating each condition and can't be optimized in any way.
*** Objects
The other approach involves using object literals for control flow, which is
idiomatic js.
#+BEGIN_SRC js
const printSwitchedValue (type) {
  const values = {
    '1': 'one',
    '2' 'two',
    '3': 'three',
    'default': 'default'
  }

  const value =  values[type] || values['default']
  console.log(value)
}
#+END_SRC
I'm more a fan of this, though manually need calling the default case seems like
a hassle. Also if any of these have a falsy value as a result, you could hit a
strange bug where the default would trigger without you expecting it.

There's also another problem if you want to have dynamic values like in redux
when you manipulate state. Here, all of the branches with state will be eagerly
evaluated. That's not great.
#+BEGIN_SRC js
const updateState = (state = 0, action) => {
  const cases = {
    'INCREMENT': state + 1,
    'DECREMENT': state -1,
    'default': state
  }
  return cases[action] || cases['default']
}
#+END_SRC
To avoid this, you would need to leverage functions for delayed evaluation.
#+BEGIN_SRC js
const updateState = (state = 0, action) => {
  const cases = {
    'INCREMENT': () => state + 1,
    'DECREMENT': () => state -1,
    'default': () => state
  }
  return cases[action]() || cases['default']()
}

#+END_SRC
This all works, but it seems like a lot of hassle for something that the
language could handle for you.
** Other langs
Other languages love switch statements! Rust, F#, Elixir, Scala. In Elm, it's
even considered a code smell to see a bunch of if else statements in a place
where a case statement would suffice. But these languages have a more robust
form of switch statements that leverage a feature called pattern matching. Why
can't we have that?
** Proposal
No really, a brave coalition of developers have put forth a proposal to TC39 to
do just that, add pattern matching case statements to newer versions of
javascript. Here's what it would look like in the simplest example:
#+BEGIN_SRC js
const updateState = (state = 0, action) =>
  case (action.type) = {
    when 'INCREMENT' -> state + 1,
    when 'DECREMENT': -> state - 1,
    when _ ->  state
  }
#+END_SRC
But it would also be much more powerful! It would deeply leverage the existing
mechanics for destructuring in javascript, letting you match at a sophisticated
level. Here's what it would look like in a more complicated case:
#+BEGIN_SRC js
const updateState = (state = 0, action) =>
  case (action) = {
    when { type: 'INCREMENT', data: {amount} } -> state + amount,
    when { type: 'DECREMENT', data: {amount} } -> state - amount,
    when _ ->  state
  }

#+END_SRC
Or even better
#+BEGIN_SRC js
const updateState = (state = 0, action) =>
  case ([action.type, action.data.amount]) = {
    when ['INCREMENT', amount] -> state + amount,
    when ['DECREMENT', amount] -> state _ amount,
    when _ ->  state
  }
#+END_SRC
** Conclusion, CTA
That's the new world. Or at least the one we could have, but it's not here yet.
If you're as excited as I am about this, then we have to make it happen. This
proposal has been accepted to stage 1 of the TC-39 process. At this point, it
exists mostly as a readme with the proposed semantics. That means it's really
easy to contribute to it! You can just read the markdown and make suggestions.

The next big step will be to get it to a place where people can play with it.
There's currently someone working on an plugin for babel that would enable it.
If you're interested in looking at it, you can either follow this pull request,
or you can follow me on twitter and I'll tweet out about it as it gets to a
place where you can play with it.
** End
Thank you for coming! This is my twitter handle if you're interested in finding
out more. Also I love the company I work for, our mission is to help everyone
write nicer code and be nicer to each other while they do it. If you would be
interested in hiring us to code with you, or if you would be interested in
joining our team to code with us, our website is testdouble.com, or you can come
talk to me about it.
